package edu.training.news_portal.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import edu.training.news_portal.bean.News;
import edu.training.news_portal.bean.NewsGroups;
import edu.training.news_portal.bean.User;
import edu.training.news_portal.dao.DaoException;
import edu.training.news_portal.dao.NewsDao;
import edu.training.news_portal.dao.pool.ConnectionPool;

public class DBNewsDao implements NewsDao {
	private final ConnectionPool connectionPool = ConnectionPool.getInstance();

	@Override
	public List<News> topNews(int count) throws DaoException {

		List<News> topNews = new ArrayList<>();

		News news1 = new News();
		News news2 = new News();
		News news3 = new News();

		news1.setTitle("Шпаргалка по проектированию REST API");
		news1.setBrief(
				"Цель статьи — дать компактную шпаргалку по проектированию API для простых CRUD‑сервисов и показать ход мыслей, который позволяет проектировать последовательно и осмысленно.");
		news1.setContent("Часть 1. Всё начинается с домена и кода\r\n" + "\r\n"
				+ "В хорошем API сначала проектируются ресурсы и взаимодействие с ними. Если доменная модель и её операции ясны, HTTP‑слой становится простым и предсказуемым.\r\n"
				+ "Минимальный словарь действий\r\n" + "\r\n"
				+ "Чтобы достичь ожидаемого результата, опираемся на пять базовых операций в бизнес‑логике:\r\n"
				+ "\r\n" + "    GetResource — получить конкретный ресурс.\r\n" + "\r\n"
				+ "    ListResources — получить коллекцию ресурсов (с фильтрами/сортировкой/пагинацией).\r\n" + "\r\n"
				+ "    CreateResource — создать ресурс.\r\n" + "\r\n"
				+ "    UpdateResource — изменить ресурс (частично или полностью).\r\n" + "\r\n"
				+ "    DeleteResource — удалить ресурс.\r\n" + "\r\n"
				+ "Чего не должно быть: GetByOrganization, GetByUser, Insert, Upsert, DeleteAll, FindOrCreate, ArchiveOldResources и т. д.\r\n"
				+ "Вся вариативность — в параметрах, а не в новых именах методов.\r\n" + "\r\n"
				+ "    Единообразный нейминг делает навигацию в коде очевидной.\r\n" + "\r\n"
				+ "    Фильтр вместо GetBy* убирает дубли и взрыв количества эндпоинтов.");
		news1.setGroup(NewsGroups.TECHNOLOGIES);
		news2.setTitle(
				"В каждом телеграм-канале с регистрацией в реестре блогеров будет бот Роскомнадзора с правами администратора");
		news2.setBrief(
				"3 октября 2025 года в РКН сообщили, что в каждом телеграм-канале с регистрацией в реестре блогеров будет бот по имени trustchannelbot от Роскомнадзора с правами администратора с доступом на добавление участников. В РКН сообщили, что бот trustchannelbot от Роскомнадзора не может отнять права у владельца, других администраторов или удалить канал. ");
		news2.setContent(
				"3 октября 2025 года в РКН сообщили, что в каждом телеграм-канале с регистрацией в реестре блогеров будет бот по имени trustchannelbot от Роскомнадзора с правами администратора с доступом на добавление участников. В РКН сообщили, что бот trustchannelbot от Роскомнадзора не может отнять права у владельца, других администраторов или удалить канал.\r\n"
						+ "\r\n"
						+ "В РКН добавили, что после подачи заявления на регистрацию канала в перечне блогеров (это должны делать все ресурсы, где есть 10 тысяч подписчиков) через портал Госуслуг нужно обязательно запустить специальный бот (у таких каналов появляется отметка «А+») и добавить его в администраторы.\r\n"
						+ "\r\n"
						+ "В ведомстве заявили, что это единственный способ подтвердить владение каналом: «Если вы пропустите этот шаг, заявление вернется с формальным признаком отказа».");
		news2.setGroup(NewsGroups.TECHNOLOGIES);
		news3.setTitle("Взаимодействие микросервисов: проблемы, решения, практические рекомендации");
		news3.setBrief(
				"Все говорили о микросервисах. Гибкость. Масштабируемость. Независимые команды. Звучало как мечта. Многие компании бросились распиливать свои монолиты. Разработка действительно ускорилась. Отдельные компоненты стало проще обновлять и разворачивать.\r\n"
						+ "\r\n"
						+ "А потом сервисам понадобилось взаимодействовать. И мечта превратилась в сложную, многомерную головоломку.");
		news3.setContent(
				"Все говорили о микросервисах. Гибкость. Масштабируемость. Независимые команды. Звучало как мечта. Многие компании бросились распиливать свои монолиты. Разработка действительно ускорилась. Отдельные компоненты стало проще обновлять и разворачивать.\r\n"
						+ "\r\n"
						+ "А потом сервисам понадобилось взаимодействовать. И мечта превратилась в сложную, многомерную головоломку.\r\n"
						+ "\r\n"
						+ "Простой вызов функции внутри монолита стал сетевым запросом. Надежность упала. Задержки выросли. Отладка превратилась в квест по распределенным логам. Внезапно оказалось, что взаимодействие сервисов — это не второстепенная деталь. Это ядро всей архитектуры. Ошибка здесь стоит дорого. Она приводит к хрупким, медленным, небезопасным и дорогим в поддержке системам. Переход на микросервисы — это не просто технический рефакторинг. Это полная смена парадигмы мышления для инженеров, тестировщиков и менеджеров.\r\n"
						+ "Проблема №1 — Эффект домино: каскадные сбои и хрупкость системы\r\n" + "\r\n"
						+ "Один сервис недоступен. Сервис, который его вызывает, ждет ответа. У него заканчиваются потоки или соединения. Он тоже становится недоступен. Эффект домино, или каскадный сбой, обрушивает всю систему. Это самая частая и опасная болезнь микросервисных архитектур, способная превратить незначительный сбой в полномасштабный отказ.\r\n"
						+ "\r\n" + "    Решение А: Паттерн «Прерыватель цепи» (Circuit Breaker)\r\n" + "\r\n"
						+ "    Это автоматический выключатель между сервисами. Он не просто повторяет запросы, он управляет состоянием соединения. У него три состояния. Closed: Обычный режим, все запросы проходят. Open: Если количество ошибок за период превышает порог, прерыватель «размыкается». Все последующие вызовы немедленно завершаются ошибкой на стороне клиента, без попытки уйти в сеть. Это дает упавшему сервису время на восстановление и, что важнее, защищает сам сервис‑клиент от исчерпания ресурсов. Half‑Open: Через заданный тайм‑аут прерыватель переходит в это состояние. Он пропускает один‑единственный тестовый запрос. Если он успешен, прерыватель замыкается (Closed). Если нет — снова размыкается (Open). Этот механизм самовосстановления критически важен.\r\n"
						+ "\r\n" + "    Решение Б: Паттерн «Изолирующий отсек» (Bulkhead)\r\n" + "\r\n"
						+ "    Представьте себе отсеки в корпусе корабля. Пробоина в одном отсеке не затапливает все судно. Этот паттерн работает так же. Ресурсы сервиса‑клиента (например, пул соединений или пул потоков) делятся на группы. Каждая группа выделяется для взаимодействия с конкретным удаленным сервисом. Если сервис B тормозит и занимает все потоки, это повлияет только на его собственный «отсек». Вызовы к другим сервисам (C, D) будут использовать свои пулы и работать как обычно. Это предотвращает деградацию всего сервиса из‑за проблем с одним из его соседей. На практике это реализуется созданием отдельных пулов потоков (как в библиотеке Hystrix) или семафоров для каждого типа вызовов.\r\n"
						+ "    Решение В: Асинхронное взаимодействие\r\n" + "\r\n"
						+ "    Это фундаментальное решение, которое предотвращает проблему, а не борется с ее последствиями. Вместо прямого вызова, который ждет ответа, сервис‑отправитель публикует сообщение в очередь (RabbitMQ, Kafka) и немедленно продолжает свою работу. Сервис‑получатель заберет сообщение из очереди, когда сможет. Если он в данный момент недоступен, сообщение просто подождет в брокере. Это полностью разрывает временную связь между сервисами. Сбой одного никак не влияет на работоспособность другого в моменте. Система становится на порядок надежнее и эластичнее.\r\n"
						+ "\r\n" + "Проблема №2 — Сага о согласованности данных\r\n" + "\r\n"
						+ "Нужно выполнить бизнес‑операцию, затрагивающую несколько сервисов: заказ, оплата, склад. В монолите это решалось одной ACID‑транзакцией. В мире микросервисов распределенные транзакции — это боль и страдания. Пытаться их реализовать «в лоб» почти всегда приводит к катастрофе.\r\n"
						+ "\r\n" + "    Решение А: Паттерн «Сага» (Оркестрация)\r\n" + "\r\n"
						+ "    Появляется отдельный сервис‑координатор — оркестратор. Он знает весь бизнес‑процесс, представляя его в виде конечного автомата. Он посылает команды сервисам‑исполнителям один за другим. «Списать деньги». Ждет ответа (события). Получил «Деньги списаны». Посылает команду «Резервировать товар». Если на каком‑то шаге приходит событие об ошибке, оркестратор начинает процесс компенсации. Он посылает команды для отмены предыдущих успешных шагов («Вернуть деньги»). Вся логика централизована, ее легко читать, отлаживать и изменять. Но оркестратор становится критически важным компонентом, и его отказ остановит все управляемые им процессы.\r\n"
						+ "\r\n" + "    Решение Б: Паттерн «Сага» (Хореография)\r\n" + "\r\n"
						+ "    Здесь нет центрального координатора. Сервисы общаются друг с другом через события. Orders публикует событие OrderCreated. Сервис Payments слушает это событие, списывает деньги и публикует PaymentProcessed. Сервис Warehouse слушает PaymentProcessed. Это похоже на танец, где каждый знает свою партию. Для отката также используются события. Payments публикует PaymentFailed, и Orders, услышав его, отменяет заказ. Это решение более децентрализовано и отказоустойчиво. Но логика процесса размазана по системе, что усложняет понимание и отладку. Понять, на каком этапе находится конкретный заказ, становится очень сложно.\r\n"
						+ "\r\n" + "    Решение В: Паттерн «Transactional Outbox»\r\n" + "\r\n"
						+ "    Это критически важный технический паттерн для надежной реализации асинхронных саг. Как гарантировать, что изменение в базе и отправка сообщения в брокер произойдут вместе? Ответ: никак, если это разные системы. Паттерн решает это так: сервис пишет бизнес‑данные и само событие в свою же базу данных в рамках одной локальной ACID‑транзакции. Событие пишется в специальную таблицу outbox. Отдельный легковесный процесс (relay) постоянно опрашивает эту таблицу, забирает неотправленные события, публикует их в Kafka или RabbitMQ и помечает как отправленные. Это гарантирует, что событие не потеряется, даже если сервис упадет сразу после коммита транзакции, но до отправки.\r\n"
						+ "\r\n" + "Проблема №3 — Деградация производительности и «тысяча порезов»\r\n" + "\r\n"
						+ "Каждый сетевой вызов добавляет миллисекунды на установку соединения, TLS-рукопожатие, сериализацию. Цепочка из десяти таких вызовов добавляет сотни миллисекунд. Пользователь не будет ждать.\r\n"
						+ "\r\n" + "    Решение А: Эффективные бинарные протоколы (gRPC)\r\n" + "\r\n"
						+ "    Данные гоняются в Protobuf. Это бинарный, жестко заданный формат. Машина его \"читает\" в разы быстрее, чем развесистый JSON. Для общения сервисов между собой, где вы сами себе и клиент, и сервер, gRPC — это просто здравый смысл, если уперлись в скорость.\r\n"
						+ "\r\n" + "    Решение Б: Материализованные представления (CQRS)\r\n" + "\r\n"
						+ "    Если сервис Orders часто нуждается в имени клиента из сервиса Users, постоянные запросы по сети — это медленно. Вместо этого можно применить подход CQRS (Command Query Responsibility Segregation). Orders может подписаться на события UserUpdated и хранить у себя актуальную, денормализованную копию нужных данных (например, в своей же базе или в Redis). Чтение этих данных становится мгновенным локальным вызовом. Скорость чтения возрастает многократно, но ценой является конечная согласованность и усложнение логики записи.\r\n"
						+ "\r\n" + "    Решение В: Агрегация на стороне API Gateway или BFF\r\n" + "\r\n"
						+ "    Вместо того чтобы клиентское приложение (например, мобильное) делало три запроса к разным сервисам для отображения одного экрана, оно делает один запрос к специальному фасаду. Это может быть API Gateway или, что еще лучше, Backend for Frontend (BFF). BFF — это отдельный сервис, который является бэкендом для конкретного фронтенда. Он знает, какие данные нужны этому клиенту, параллельно опрашивает внутренние сервисы, агрегирует и трансформирует ответы в удобный для клиента формат.\r\n"
						+ "\r\n" + "Проблема №4 — Тиски разработчика: локальная среда и тестирование\r\n" + "\r\n"
						+ "Разработчику нужно внести правки в сервис, который зависит от 15 других. Как запустить и протестировать это? Поднять 15 сервисов, Kafka, PostgreSQL, Redis — нереально. Продуктивность падает до нуля, а цикл обратной связи растягивается на часы.\r\n"
						+ "\r\n" + "    Решение А: Контрактное тестирование (Consumer-Driven Contracts)\r\n" + "\r\n"
						+ "    Тестируется не живая интеграция, а соблюдение контракта. Сервис-потребитель пишет тест, который определяет, какие данные он ожидает от сервиса-провайдера. Этот тест генерирует файл-контракт (например, с помощью инструмента Pact). Этот файл передается провайдеру. Провайдер в своем CI/CD-пайплайне автоматически проверяет, что его текущая версия API не нарушает контракты всех своих потребителей. Это позволяет тестировать сервисы в полной изоляции.\r\n"
						+ "\r\n" + "    Решение Б: Виртуализация сервисов и заглушки (Mocks/Stubs)\r\n" + "\r\n"
						+ "    Это могут быть простые моки в коде или полноценные сетевые заглушки-стабы. Они притворяются реальными сервисами и отвечают так, как вы им скажете. Инструменты вроде WireMock позволяют в пару строк настроить, чтобы заглушка отвечала ошибкой 503 или думала по две секунды.\r\n"
						+ "\r\n" + "    Решение В: Инструменты для разработки в Kubernetes (Telepresence, Gefyra)\r\n"
						+ "\r\n"
						+ "    Есть инструменты, которые делают почти невозможное. Тот же Telepresence. Он позволяет запустить один сервис у себя, и он волшебным образом становится частью удаленного кластера. Сетевые запросы из облака прилетают к вам, а ваш код может обращаться к базам и сервисам в этом облаке, будто он там живет.\r\n"
						+ "\r\n" + "Проблема №5 — Распределенная дилемма данных: Joins vs. Duplication\r\n" + "\r\n"
						+ "В реляционном мире мы просто делали JOIN. В мире микросервисов прямой запрос к базе данных другого сервиса — абсолютное табу, так как это создает жесточайшую связность. Как получить связанные данные?\r\n"
						+ "\r\n" + "    Решение А: API Composition\r\n" + "\r\n"
						+ "    Сервис-агрегатор (или API Gateway/BFF) делает несколько вызовов к разным сервисам и «джойнит» данные у себя в памяти перед тем, как отдать результат клиенту. Например, получает заказ из Order Service, а затем по userId из заказа получает данные пользователя из User Service. Просто, но может быть медленно и неэффективно.\r\n"
						+ "\r\n" + "    Решение Б: Event-Carried State Transfer\r\n" + "\r\n"
						+ "    Это более продвинутая версия репликации данных. Вместо того чтобы событие содержало только ID сущности, оно содержит все ключевые данные, которые могут понадобиться потребителям. Например, событие OrderCreated будет содержать не только ID товаров, но и их названия и цены на момент заказа. Это избавляет сервис-потребитель от необходимости делать последующий синхронный вызов, чтобы обогатить данные.\r\n"
						+ "\r\n" + "    Решение В: Общая база данных (антипаттерн)\r\n" + "\r\n"
						+ "    Иногда команды выбирают этот путь для кажущейся простоты. Несколько сервисов используют одну и ту же схему базы данных. Это создает скрытые, хрупкие зависимости на самом глубоком уровне стека. Изменение таблицы одним сервисом может сломать десять других. Это убивает главные преимущества микросервисов — автономность и независимое развертывание. Этого следует избегать почти всегда.\r\n"
						+ "\r\n" + "Проблема №6 – Системная слепота: наблюдаемость и отладка\r\n" + "\r\n"
						+ "Проблема возникла где-то в цепочке из семи сервисов. Логи разбросаны, тайминги неизвестны. Найти причину — все равно что искать иголку в стоге сена. Без правильных инструментов вы слепы.\r\n"
						+ "\r\n" + "    Решение А: Распределенная трассировка (Distributed Tracing)\r\n" + "\r\n"
						+ "    Обязательно к внедрению. На входе в систему (в API Gateway) генерируется уникальный ID трассировки (Correlation ID). Этот ID, вместе с ID текущего шага (Span ID), пробрасывается через все вызовы (в HTTP-заголовках или метаданных сообщений). Библиотеки (например, OpenTelemetry) автоматически собирают эти данные и отправляют их в систему вроде Jaeger или Zipkin, которая строит наглядный граф вызовов, показывая тайминги каждого шага.\r\n"
						+ "\r\n" + "    Решение Б: Централизованное логирование со структурой\r\n" + "\r\n"
						+ "    Логи всех сервисов должны отправляться в единую систему (ELK Stack, Loki, Splunk). Критически важно, чтобы логи были структурированными (например, в формате JSON), а не просто текстом. Это позволяет делать мощные запросы: «покажи все логи с уровнем 'error' для сервиса 'payment‑service', где 'trace_id' равен 'xyz'».\r\n"
						+ "\r\n" + "    Решение В: Метрики бизнес‑уровня\r\n" + "\r\n"
						+ "    Помимо технических метрик (CPU, память), нужно отслеживать бизнес‑метрики, проходящие через сервисы. Например, «количество созданных заказов в минуту», «процент ошибок при оплате», «время от регистрации до первой покупки». Часто падение бизнес‑метрики — первый и самый важный сигнал о скрытой технической проблеме.\r\n"
						+ "\r\n" + "Проблема №7 — Операционный хаос: обнаружение и конфигурация\r\n" + "\r\n"
						+ "У вас 100 сервисов. Как сервис A узнает IP-адрес сервиса B? Где сервис C хранит пароль от базы данных? Управлять этим вручную в файлах — путь к катастрофе.\r\n"
						+ "\r\n" + "    Решение А: Реестр сервисов (Service Discovery)\r\n" + "\r\n"
						+ "    Каждый экземпляр сервиса при старте регистрируется в реестре (Consul, etcd, Eureka), сообщая свой адрес и порт. Когда сервису A нужно вызвать B, он сначала спрашивает у реестра: \"дай мне список здоровых экземпляров сервиса B\". Затем он выбирает один из них и делает вызов.\r\n"
						+ "\r\n" + "    Решение Б: Централизованный сервер конфигурации\r\n" + "\r\n"
						+ "    Все конфигурации (строки подключения, feature flags, тайм-ауты) хранятся в одном месте (Spring Cloud Config, HashiCorp Consul KV). Сервисы при старте запрашивают свою конфигурацию с этого сервера и могут подписываться на ее изменения. Это позволяет менять настройки на лету без перезапуска сотен экземпляров сервисов.\r\n"
						+ "\r\n" + "    Решение В: Service Mesh (сетка сервисов)\r\n" + "\r\n"
						+ "    Такие инструменты, как Istio или Linkerd, берут на себя всю «черную работу» по взаимодействию. Они внедряют прокси‑контейнер (sidecar) рядом с каждым сервисом. Этот прокси прозрачно для приложения управляет обнаружением, балансировкой нагрузки, шифрованием (mTLS), Circuit Breaking, повторами, трассировкой. Разработчики могут сосредоточиться на бизнес‑логике, а не на инфраструктурных проблемах. Это мощное, но сложное решение.\r\n"
						+ "\r\n" + "Проблема №8 — Эволюция API и версионирование\r\n" + "\r\n"
						+ "Сервис A обновился, его API изменился. Все сервисы, которые от него зависели, сломались. Поддерживать обратную совместимость — сложная, но необходимая задача для сохранения независимости команд.\r\n"
						+ "\r\n" + "    Решение А: Версионирование в URI или заголовках\r\n" + "\r\n"
						+ "    Новая версия API, ломающая совместимость, доступна по новому адресу (/api/v2/users) или требует специального заголовка (Accept: application/vnd.company.v2+json). Простой и понятный способ управлять изменениями. Старая версия (v1) поддерживается до тех пор, пока все клиенты не мигрируют.\r\n"
						+ "\r\n" + "    Решение Б: Расширяемые форматы данных (Tolerant Reader)\r\n" + "\r\n"
						+ "    Используйте форматы, которые терпимы к изменениям, тот же Protobuf. Идея проста: клиент должен игнорировать любые поля в ответе, которые он не понимает. Добавили новое поле? Старый клиент его просто не заметит. Это позволяет развивать API, не плодя версии.\r\n"
						+ "\r\n" + "    Решение В: Паттерн «Адаптер» (Anti‑Corruption Layer)\r\n" + "\r\n"
						+ "    Когда трогать старых клиентов страшно или невозможно (привет, старое мобильное приложение на полке у CEO), ставят сервис-адаптер. Это прослойка-переводчик. Она принимает старый формат запроса, переделывает его в новый, а ответ переводит обратно. Это стратегический ход, чтобы изолировать новую, чистую часть системы от наследия прошлого.\r\n"
						+ "\r\n" + "Проблема №9 — Дыры в безопасности: доверие и авторизация\r\n" + "\r\n"
						+ "В монолите все вызовы были внутри одного процесса. В микросервисах они идут по сети. Кто угодно в сети может попытаться вызвать ваш сервис. Принцип «Zero Trust» (нулевое доверие) — не опция, а необходимость.\r\n"
						+ "\r\n" + "    Решение А: Service Mesh для взаимного TLS (mTLS)\r\n" + "\r\n"
						+ "    Сетка сервисов автоматически обеспечивает шифрование всего трафика между сервисами и выдает каждому сервису сертификат. При установке соединения сервисы проверяют сертификаты друг друга, чтобы установить доверие (mutual TLS). Это гарантирует, что с вашим сервисом говорит именно тот, за кого себя выдает, и что трафик зашифрован.\r\n"
						+ "\r\n" + "    Решение Б: API Gateway как точка входа\r\n" + "\r\n"
						+ "    API Gateway — это ваш охранник на входе. Он проверяет подлинность внешних запросов (например, по JWT‑токену пользователя), прежде чем пропустить их во внутреннюю сеть. Он выполняет аутентификацию (кто ты?) и грубую авторизацию (имеешь ли ты право заходить?).\r\n"
						+ "\r\n" + "    Решение В: Токены доступа для сервисов (OAuth2 Client Credentials)\r\n"
						+ "    Для детальной авторизации между сервисами используются токены. Сервис A получает от сервера авторизации собственный токен (JWT) с правами (scopes), например orders:write. При вызове сервиса B он передает этот токен. Сервис B проверяет токен, чтобы убедиться, что у A есть права на выполнение данной операции.\r\n"
						+ "\r\n" + "Практические рекомендации\r\n" + "\r\n"
						+ "    Correlation ID — это не опция, это закон. Без сквозного ID трассировки вы слепы.\r\n"
						+ "\r\n"
						+ "    Делайте каждый изменяющий эндпоинт идемпотентным. Сеть повторяет запросы. Будьте к этому готовы.\r\n"
						+ "\r\n"
						+ "    Владение данными — свято. У каждого фрагмента данных должен быть один и только один сервис-владелец.\r\n"
						+ "\r\n"
						+ "    Мониторьте p99 задержки, а не среднее. Среднее значение скрывает боль ваших самых недовольных пользователей.\r\n"
						+ "\r\n"
						+ "    Ломайте систему сами в тестовом окружении. Внедряйте хаос-инжиниринг. Найдите слабые места до того, как их найдут ваши пользователи.\r\n"
						+ "\r\n"
						+ "    Начинайте с простого. Не нужно сразу внедрять Service Mesh и Kafka. Начните с REST, Circuit Breaker и Service Discovery. Усложняйте по мере необходимости.\r\n"
						+ "\r\n"
						+ "    Думайте о разработчиках. Обеспечьте простой способ запуска и тестирования сервиса локально. Счастливый и продуктивный разработчик — залог успеха проекта.\r\n"
						+ "\r\n"
						+ "Успех с микросервисами — это не про слепое следование моде. Это про глубокое понимание компромиссов. Каждый день вы балансируете на канате между производительностью, надежностью, стоимостью и скоростью разработки. Задача инженера — не найти один «правильный» ответ, его не существует. Задача — выбрать наименее болезненный компромисс для конкретной задачи здесь и сейчас. И быть готовым его пересмотреть завтра, когда изменятся требования или появятся новые инструменты.");
		news3.setGroup(NewsGroups.TECHNOLOGIES);

		topNews.add(news1);
		topNews.add(news2);
		topNews.add(news3);

		return topNews;
	}

	@Override
	public boolean addNews(News news) throws DaoException {
		String sql = "INSERT INTO news (news_group_id, title, brief, content_path, create_date, udated_date, publish_date, user_id) "
				+ "VALUES (?, ?, ?, ?, ?, ?, ?, ?)";

		try (Connection connection = connectionPool.takeConnection();
				PreparedStatement ps = connection.prepareStatement(sql)) {

			ps.setInt(1, news.getGroup().getId());
			ps.setString(2, news.getTitle());
			ps.setString(3, news.getBrief());
			ps.setString(4, news.getFileContentPath());
			ps.setObject(5, news.getCreateDateTime());
			ps.setObject(6, news.getUpdateDateTime());
			ps.setObject(7, news.getPublishingDateTime());

			if (news.getPublisher() != null) {
				ps.setInt(8, news.getPublisher().getId());
			} else {
				ps.setNull(8, java.sql.Types.INTEGER);
			}
			System.out.println("тут1");
			int result = ps.executeUpdate();
			System.out.println("тут2");

			return result > 0;

		} catch (SQLException e) {
			throw new DaoException("Ошибка при добавлении новости", e);
		}
	}

	@Override
	public News getNewsById(int newsId) throws DaoException {
		String sql = "SELECT n.id, n.title, n.brief, n.content_path, n.create_date, n.updated_date, n.publish_date, "
				+ "n.news_group_id, n.users_id, ng.value AS group_value, "
				+ "u.id AS user_id, u.email, u.password, u.roles_idroles, u.user_status_id, u.registration_date, u.updated_date AS user_updated_date "
				+ "FROM news n " + "JOIN news_group ng ON n.news_group_id = ng.id "
				+ "LEFT JOIN users u ON n.users_id = u.id " + "WHERE n.id = ?";

		try (Connection connection = connectionPool.takeConnection();
				PreparedStatement ps = connection.prepareStatement(sql)) {

			ps.setInt(1, newsId);
			try (ResultSet rs = ps.executeQuery()) {
				if (rs.next()) {
					News news = new News();
					news.setId(rs.getInt("id"));
					news.setTitle(rs.getString("title"));
					news.setBrief(rs.getString("brief"));

					String groupValue = rs.getString("group_value");
					news.setGroup(NewsGroups.valueOf(groupValue.toUpperCase()));

					news.setCreateDateTime(rs.getObject("create_date", LocalDateTime.class));
					news.setUpdateDateTime(rs.getObject("updated_date", LocalDateTime.class));
					news.setPublishingDateTime(rs.getObject("publish_date", LocalDateTime.class));

					int userId = rs.getInt("users_id");
					if (!rs.wasNull()) {
						User publisher = new User();
						publisher.setId(userId);
						publisher.setEmail(rs.getString("email"));
						news.setPublisher(publisher);
					}

					String contentPath = rs.getString("content_path");
					news.setFileContentPath(contentPath);

					return news;
				} else {
					return null; // Новость с таким id не найдена
				}
			}
		} catch (SQLException e) {
			throw new DaoException("Error fetching news by id", e);
		}
	}

}
